;[main]
;#login page configuration
;authc.loginUrl = /faces/login.xhtml
;
;#input field names
;authc.usernameParam = username
;authc.passwordParam = password
;
;#id for login failure
;#authc.failureKeyAttribute = shiroLoginFailure
;
;
;# use native session management so we can configure our own session clustering:
;sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
;sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
;securityManager.sessionManager = $sessionManager
;#next line should disable appending JSESSIONID to URL GET parameter
;securityManager.sessionManager.sessionIdUrlRewritingEnabled = false
;securityManager.sessionManager.sessionDAO = $sessionDAO
;# We have configured Hazelcast to enforce a TTL for the activeSessions Map. No need for Shiro to invalidate!
;securityManager.sessionManager.sessionValidationSchedulerEnabled = false
;
; 
;# Configure Hazelcast as our Shiro CacheManager. Adding session capacity is as easy as adding Hazelcast nodes!
;cacheManager = org.apache.shiro.hazelcast.cache.HazelcastCacheManager
;securityManager.cacheManager = $cacheManager
;
;
;#conifg for AD
;activeDirectoryrealm1 = org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm
;
;#system user
;activeDirectoryrealm1.systemUsername = supportsaps
;activeDirectoryrealm1.systemPassword = osloserver2010
;activeDirectoryrealm1.url = ldap://10.36.64.52:389
;activeDirectoryrealm1.searchBase = "DC=pr,DC=lighting,DC=int"
;
;#grop role mapping (searches in usesers memberOf)
;activeDirectoryrealm1.groupRolesMap = "CN=IT_Admin,OU=Applications,OU=Groups,OU=SAPS,DC=pr,DC=lighting,DC=int" : "IT_ADMIN", "CN=OWA_HR,OU=Applications,OU=Groups,OU=SAPS,DC=pr,DC=lighting,DC=int" : "OWA_HR"
;activeDirectoryrealm1.principalSuffix = @pr.lighting.int
;
;#decleration of a security manager
;securityManager.realms = $activeDirectoryrealm1
;
;#declatration of a authentication strategy
;authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
;securityManager.authenticator.authenticationStrategy = $authcStrategy
;
;#declatration of a custom authorization filter
;customFilter = com.odelowebapp.entity.CustomAuthorizationFilter
;
;#role configuration
;[roles]
;#user role equals permission 
;#IT admin has all permissions
;IT_ADMIN = *
;OWA_HR = hr:*
;
;#urls
;[urls]
;#auth - url requires authentication
;/faces/login.xhtml = authc
;
;#perms - url that can be access by the specified permmision 
;/faces/SIGN/** = authc, customFilter[IT_ADMIN, OWA_HR]
;
;#anon - url does not requires authentication
;/faces/HRDisplays/index.xhtml = anon
;/faces/IT/open.xhtml = anon
;/faces/IT/secured.xhtml = authc, customFilter[IT_ADMIN]
;/faces/TEST/** = authc
;/faces/javax.faces.resource/** = anon